#!/usr/bin/env python3
"""
Script pour pr√©parer le projet pour l'importation sur GitHub
"""

import os
import shutil
import subprocess
from pathlib import Path
import sys

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent.parent))

from config import *

def check_git_status():
    """V√©rifier le statut Git"""
    print("üîç V√©rification du statut Git...")
    
    try:
        result = subprocess.run(['git', 'status'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úì Git est initialis√©")
            return True
        else:
            print("‚ö†Ô∏è Git n'est pas initialis√©")
            return False
    except FileNotFoundError:
        print("‚ùå Git n'est pas install√©")
        return False

def initialize_git():
    """Initialiser Git si n√©cessaire"""
    if not check_git_status():
        print("üöÄ Initialisation de Git...")
        subprocess.run(['git', 'init'])
        print("‚úì Git initialis√©")

def cleanup_before_commit():
    """Nettoyer avant le commit"""
    print("üßπ Nettoyage avant commit...")
    
    # Ex√©cuter le script de nettoyage
    cleanup_script = PROJECT_ROOT / "scripts" / "cleanup.py"
    if cleanup_script.exists():
        subprocess.run([sys.executable, str(cleanup_script)])
    
    print("‚úì Nettoyage termin√©")

def check_file_sizes():
    """V√©rifier la taille des fichiers"""
    print("üìä V√©rification de la taille des fichiers...")
    
    large_files = []
    for file_path in PROJECT_ROOT.rglob("*"):
        if file_path.is_file() and not file_path.name.startswith('.'):
            size_mb = file_path.stat().st_size / (1024 * 1024)
            if size_mb > 50:  # Plus de 50MB
                large_files.append((file_path, size_mb))
    
    if large_files:
        print("‚ö†Ô∏è Fichiers volumineux d√©tect√©s:")
        for file_path, size_mb in large_files:
            print(f"  - {file_path}: {size_mb:.1f}MB")
        print("Ces fichiers peuvent causer des probl√®mes sur GitHub.")
    else:
        print("‚úì Aucun fichier volumineux d√©tect√©")

def create_github_workflow():
    """Cr√©er un workflow GitHub Actions"""
    print("‚öôÔ∏è Cr√©ation du workflow GitHub Actions...")
    
    workflow_dir = PROJECT_ROOT / ".github" / "workflows"
    workflow_dir.mkdir(parents=True, exist_ok=True)
    
    workflow_content = """name: Tests et d√©ploiement

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Installation des d√©pendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configuration du projet
      run: |
        python scripts/setup.py
    
    - name: Tests (si disponibles)
      run: |
        echo "Tests √† impl√©menter"
        # python -m pytest tests/
    
    - name: V√©rification de la structure
      run: |
        python -c "from config import *; create_directories(); print('Structure OK')"
"""
    
    workflow_file = workflow_dir / "ci.yml"
    with open(workflow_file, "w", encoding="utf-8") as f:
        f.write(workflow_content)
    
    print("‚úì Workflow GitHub Actions cr√©√©")

def create_issue_templates():
    """Cr√©er des templates d'issues GitHub"""
    print("üìù Cr√©ation des templates d'issues...")
    
    templates_dir = PROJECT_ROOT / ".github" / "ISSUE_TEMPLATE"
    templates_dir.mkdir(parents=True, exist_ok=True)
    
    # Template de bug
    bug_template = """---
name: üêõ Bug report
about: Signaler un bug
title: '[BUG] '
labels: ['bug']
assignees: ''
---

## Description du bug
Une description claire et concise du bug.

## √âtapes pour reproduire
1. Aller √† '...'
2. Cliquer sur '...'
3. Faire d√©filer jusqu'√† '...'
4. Voir l'erreur

## Comportement attendu
Une description claire de ce qui devrait se passer.

## Captures d'√©cran
Si applicable, ajoutez des captures d'√©cran pour expliquer votre probl√®me.

## Environnement
- OS: [ex: Windows 10]
- Python: [ex: 3.9.0]
- Version du projet: [ex: 1.0.0]

## Informations suppl√©mentaires
Ajoutez tout autre contexte sur le probl√®me ici.
"""
    
    # Template de feature
    feature_template = """---
name: ‚ú® Feature request
about: Sugg√©rer une nouvelle fonctionnalit√©
title: '[FEATURE] '
labels: ['enhancement']
assignees: ''
---

## Description de la fonctionnalit√©
Une description claire et concise de la fonctionnalit√© souhait√©e.

## Probl√®me r√©solu
Une description claire du probl√®me que cette fonctionnalit√© r√©soudrait.

## Solution propos√©e
Une description claire de la solution souhait√©e.

## Alternatives consid√©r√©es
Une description claire de toutes les solutions alternatives que vous avez consid√©r√©es.

## Informations suppl√©mentaires
Ajoutez tout autre contexte ou captures d'√©cran sur la demande de fonctionnalit√© ici.
"""
    
    with open(templates_dir / "bug_report.md", "w", encoding="utf-8") as f:
        f.write(bug_template)
    
    with open(templates_dir / "feature_request.md", "w", encoding="utf-8") as f:
        f.write(feature_template)
    
    print("‚úì Templates d'issues cr√©√©s")

def main():
    """Pr√©paration compl√®te pour GitHub"""
    print("üöÄ Pr√©paration du projet pour GitHub...")
    
    # Initialiser Git si n√©cessaire
    initialize_git()
    
    # Nettoyer avant commit
    cleanup_before_commit()
    
    # V√©rifier la taille des fichiers
    check_file_sizes()
    
    # Cr√©er le workflow GitHub Actions
    create_github_workflow()
    
    # Cr√©er les templates d'issues
    create_issue_templates()
    
    print("\nüéâ Pr√©paration termin√©e !")
    print("\nüìã Prochaines √©tapes pour GitHub :")
    print("1. Ajouter tous les fichiers : git add .")
    print("2. Faire le premier commit : git commit -m 'Initial commit'")
    print("3. Cr√©er un repository sur GitHub")
    print("4. Ajouter l'origin : git remote add origin <URL_GITHUB>")
    print("5. Pousser vers GitHub : git push -u origin main")
    print("\n‚ö†Ô∏è  N'oubliez pas de t√©l√©charger les donn√©es EMO-DB apr√®s avoir clon√© le repository !")

if __name__ == "__main__":
    main() 